name: Day-2 OWASP ZAP DAST Scan

on:
  push:
    branches: [ main ]
    paths:
      - 'Day-2/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'Day-2/**'

jobs:
  zap-scan:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ Setup Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      # 3️⃣ Install dependencies
      - name: Install dependencies
        run: |
          cd Day-2/app
          pip install -r requirements.txt

      # 4️⃣ Run Flask app in background on 0.0.0.0:3000
      - name: Run Flask app
        run: |
          cd Day-2/app
          nohup python app.py > flask.log 2>&1 &
          # wait until port 3000 is reachable (max 30s)
          for i in {1..10}; do
            if curl -sS http://localhost:3000 >/dev/null 2>&1; then
              echo "App is running on :3000"
              break
            fi
            echo "Waiting for app to start... ($i)"
            sleep 3
          done
          tail -n 200 flask.log || true

      # 5️⃣ Create ZAP workspace with proper permissions
      - name: Create ZAP workspace (writable)
        run: |
          mkdir -p zap-workspace
          chmod -R 777 zap-workspace
          ls -la zap-workspace

      # 6️⃣ Run ZAP baseline scan
      - name: Run ZAP Scan (baseline)
        uses: zaproxy/action-baseline@v0.9.0
        continue-on-error: true
        with:
          target: "http://localhost:3000"
          cmd_options: >
            -r report_html.html
            -J report_json.json
            -w report_md.md
            --output-dir /zap/wrk

      # 7️⃣ Move reports to artifacts folder
      - name: Prepare reports
        run: |
          mkdir -p zap-reports
          mv zap-workspace/*.html zap-workspace/*.json zap-workspace/*.md zap-reports/ 2>/dev/null || true
          mv report_html.html report_json.json report_md.md zap-reports/ 2>/dev/null || true
          echo "Final reports:"
          ls -la zap-reports/ || true

      # 8️⃣ Verify reports were generated
      - name: Verify reports
        run: |
          if [ ! -f zap-reports/report_html.html ] && [ ! -f zap-reports/report_json.json ]; then
            echo "No reports found in zap-reports/, checking workspace and repo root..."
            ls -la zap-workspace/ || true
            find . -maxdepth 3 -type f \( -iname "*.html" -o -iname "*.json" -o -iname "*.md" \) | head -20 || true
          else
            echo "Reports found successfully!"
          fi

      # 9️⃣ Upload ZAP reports as artifacts
      - name: Upload ZAP Reports
        uses: actions/upload-artifact@v4
        with:
          name: zap-security-reports
          path: |
            zap-reports/
            zap-workspace/
          retention-days: 30

      # 🔟 Show scan summary in workflow summary
      - name: Display Scan Summary
        run: |
          echo "## ZAP Security Scan Completed" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Scan Results:**" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Passed: 59 checks (example)" >> $GITHUB_STEP_SUMMARY
          echo "- ⚠️ Warnings: 8 issues (example)" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ Failures: 0 (example)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "💡 **Note:** ZAP may exit with non-zero codes when warnings are found; we've allowed the scan to continue." >> $GITHUB_STEP_SUMMARY
          echo "📁 **Download reports from Actions → Artifacts**" >> $GITHUB_STEP_SUMMARY
